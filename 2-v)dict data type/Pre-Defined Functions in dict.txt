		==============================================================
				Pre-Defined Functions in dict
		==============================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) clear()
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   dictobj.clear()
=>This Funcrtion is used for Removing all the Elements of dict 
------------------------
Examples
------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1),id(d1))--------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'> 2980973260224
>>> len(d1)--------------------------------------4
>>> d1.clear()
>>> print(d1,type(d1),id(d1))---------------{} <class 'dict'> 2980973260224
>>> len(d1)---------------------------------------0
>>> print({}.clear())-----------------------------None
>>> print(dict().clear())------------------------None
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) pop()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   dictobj.pop(Key)
=>This Function is used for  Removing (Key,Value) from Non-empty dict Object by passing Value of Key
=>If the value of key does not exist then we get KeyError.
---------------------------------------------------------------
Examples
---------------------------------------------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1),id(d1))-----------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'> 2980973336832
>>> d1.pop(20)-----------------------------------3.4
>>> print(d1,type(d1),id(d1))----------------{10: 1.2, 30: 4.5, 40: 2.3} <class 'dict'> 2980973336832
>>> d1.pop(30)----------------------------------4.5
>>> print(d1,type(d1),id(d1))----------------{10: 1.2, 40: 2.3} <class 'dict'> 2980973336832
>>> d1.pop(40)----------------------------------2.3
>>> print(d1,type(d1),id(d1))----------------{10: 1.2} <class 'dict'> 2980973336832
>>> d1.pop(100)---------------------------------KeyError: 100
>>> print({}.pop(10))---------------------------KeyError: 10
>>> print(dict().pop(10))---------------------KeyError: 10
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) popitem()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    dictobj.popitem()
=>This function is used for removing last (Key,Value)  from non-empty dict object.
=>When we call this function on empty dict object then we get KeyError.
------------------------------------
Examples
------------------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1),id(d1))--------------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'> 2980973335936
>>> d1.popitem()-----------------------------------(40, 2.3)
>>> print(d1,type(d1),id(d1))-------------------{10: 1.2, 20: 3.4, 30: 4.5} <class 'dict'> 2980973335936
>>> d1.popitem()----------------------------------(30, 4.5)
>>> print(d1,type(d1),id(d1))-------------------{10: 1.2, 20: 3.4} <class 'dict'> 2980973335936
>>> d1.popitem()----------------------------------(20, 3.4)
>>> print(d1,type(d1),id(d1))-------------------{10: 1.2} <class 'dict'> 2980973335936
>>> d1.popitem()----------------------------------(10, 1.2)
>>> print(d1,type(d1),id(d1))-------------------{} <class 'dict'> 2980973335936
>>> d1.popitem()----------------------------------KeyError: 'popitem(): dictionary is empty'
>>> print({}.popitem())--------------------------KeyError: 'popitem(): dictionary is empty'
>>> print(dict().popitem())----------------------KeyError: 'popitem(): dictionary is empty'
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4) copy()-----Implements Shallow Copy
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:      dictobj2=dictobj1.copy()
=>This Function is used for Copying the content of Dict Object into another dict object.
----------------------------------------
Examples
----------------------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1),id(d1))-------------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'> 2980973329344
>>> d2=d1.copy() # Shallow Copy
>>> print(d2,type(d2),id(d2))-------------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'> 2980973335936
>>> d1[50]=1.2 # Inserted Entry
>>> d2[15]=2.3 # Inserted Entry
>>> print(d1,type(d1),id(d1))------------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3, 50: 1.2} <class 'dict'> 2980973329344
>>> print(d2,type(d2),id(d2))------------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3, 15: 2.3} <class 'dict'> 2980973335936
>>> d1[10]=2.2 # Modified entry
>>> d2[10]=7.8 # Modified entry
>>> print(d1,type(d1),id(d1))------------------{10: 2.2, 20: 3.4, 30: 4.5, 40: 2.3, 50: 1.2} <class 'dict'> 2980973329344
>>> print(d2,type(d2),id(d2))------------------{10: 7.8, 20: 3.4, 30: 4.5, 40: 2.3, 15: 2.3} <class 'dict'> 2980973335936
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) get()------Most Imp
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:      Value=dictobj.get(Key)
				(OR)
			dictobj.get(Key)
=>This Function is used for Obtaining Value of Value by passing Value of Key from Non-empty dict object.
=>If the Value of Key does not exist then we get None as a Result.
-----------------------------------
Examples
-----------------------------------
>>> d1={10:"Python",20:"C",30:"Cpp",40:"Django"}
>>> print(d1)-------------------------{10: 'Python', 20: 'C', 30: 'Cpp', 40: 'Django'}
>>> val=d1.get(20)
>>> print(val)------------------------C
>>> d1.get(20)----------------------'C'
>>> val=d1.get(30)
>>> print(val)------------------------Cpp
>>> val=d1.get(10)
>>> print(val)------------------------Python
>>> val=d1.get(130)
>>> print(val)-----------------------None
>>> print({}.get(100))------------None
>>> print(dict().get(100))-------None
--------------------------------------------------------------------------------------------
						OR
Alternative Syntax:      dictobj[Key]
=>This Syntax also Gives Value of Value by passing Value of Key
=>If the Value of Key does not exist then we get KeyError.
-------------------------
Examples
-------------------------
>>> d1={10:"Python",20:"C",30:"Cpp",40:"Django"}
>>> print(d1)-----------------{10: 'Python', 20: 'C', 30: 'Cpp', 40: 'Django'}
>>> d1[10]--------------------'Python'
>>> d1[20]--------------------'C'
>>> d1[40]-------------------'Django'
>>> d1[400]------------------KeyError: 400
--------------------
>>> print({}[20])----------------------------KeyError: 20
>>> print(dict()[20])----------------------KeyError: 20
>>> print({1:1.2,2:2.2,3:3.3}.get(1))-------1.2
>>> print({1:1.2,2:2.2,3:3.3}[2])------------2.2
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6) keys()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:     varname=dictobj.keys()
=>This Function is used for Obtaining Values of Key  and placed in varname and whose type is <class, 'dict_keys'>
-----------------------------
Examples
-----------------------------
>>> d1={10:"Python",20:"C",30:"Cpp",40:"Django"}
>>> print(d1)--------------{10: 'Python', 20: 'C', 30: 'Cpp', 40: 'Django'}
>>> ks=d1.keys()
>>> print(ks,type(ks))------------dict_keys([10, 20, 30, 40])    <class 'dict_keys'>
>>> for k in ks:
...		print(k)
...
				10
				20
				30
				40
>>> for k in d1.keys():
...		print(k)
...
				10
				20
				30
				40
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7) values()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:    varname=dictobj.values()
=>This Function is used for Obtaining Values of Value  and placed in varname and whose type is <class, 'dict_values'>
----------------------------
Examples
----------------------------
>>> d1={10:"Python",20:"C",30:"Cpp",40:"Django"}
>>> print(d1)----------------{10: 'Python', 20: 'C', 30: 'Cpp', 40: 'Django'}
>>> vs=d1.values()
>>> print(vs,type(vs))---------dict_values(['Python', 'C', 'Cpp', 'Django']) <class 'dict_values'>
>>> for v in vs:
...		print(v)
...
			Python
			C
			Cpp
			Django
>>> for v in d1.values():
...		print(v)
...
			Python
			C
			Cpp
			Django


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8) items()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   varname=dictobj.items()
=>This Function is used for Obtaining (Key,Value) from dict object in the tuples of list and placed in varname and whose type is <class, dict_items>.
----------------------------------
Examples
----------------------------------
>>> d1={10:"Python",20:"C",30:"Cpp",40:"Django"}
>>> print(d1)------------------{10: 'Python', 20: 'C', 30: 'Cpp', 40: 'Django'}
>>> kvs=d1.items()
>>> print(kvs,type(kvs))----------dict_items([(10, 'Python'), (20, 'C'), (30, 'Cpp'), (40, 'Django')]) <class 'dict_items'>
>>> for kv in kvs:
...		print(kv)
...
			(10, 'Python')
			(20, 'C')
			(30, 'Cpp')
			(40, 'Django')
>>> for kv in d1.items():
...		print(kv)
...
			(10, 'Python')
			(20, 'C')
			(30, 'Cpp')
			(40, 'Django')

>>> for k,v in kvs:
...		print(k,"-->",v)
...
			10 --> Python
			20 --> C
			30 --> Cpp
			40 --> Django
>>> for k,v in d1.items():
...		print(k,"==>",v)
...
			10 ==> Python
			20 ==> C
			30 ==> Cpp
			40 ==> Django
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9) update()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:     dictobj1.update(dictobj2)
=>This Syntax is used for Updating (Insert, Modify) the dictobj (Key,Value) with dictobj2 (Key,Value) 
=>update() is used for Mergiging DictObj1  with dictobj2.
--------------------------------------------
Examples
--------------------------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={30:1.2,40:1.4}
>>> print(d1,id(d1))-----------------{10: 1.2, 20: 2.3} 2980973329344
>>> print(d2,id(d2))-----------------{30: 1.2, 40: 1.4} 2980975694272
>>> d1.update(d2)
>>> print(d1,id(d1))-----------------{10: 1.2, 20: 2.3, 30: 1.2, 40: 1.4} 2980973329344
-----------------
>>> d1={10:1.2,20:2.3}
>>> d2={20:1.2,40:1.4}
>>> print(d1,id(d1))-------------{10: 1.2, 20: 2.3} 2980973335936
>>> print(d2,id(d2))-------------{20: 1.2, 40: 1.4} 2980973329344
>>> d1.update(d2)
>>> print(d1,id(d1))-------------{10: 1.2, 20: 1.2, 40: 1.4} 2980973335936
>>> print(d2,id(d2))--------------{20: 1.2, 40: 1.4} 2980973329344
-----------------------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={10:11.2,20:21.4}
>>> print(d1,id(d1))---------------{10: 1.2, 20: 2.3} 2980975694272
>>> print(d2,id(d2))---------------{10: 11.2, 20: 21.4} 2980973335936
>>> d2.update(d1)
>>> print(d2,id(d2))---------------{10: 1.2, 20: 2.3} 2980973335936
>>> print(d1,id(d1))---------------{10: 1.2, 20: 2.3} 2980975694272
----------------------------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={1:"Python",2:"C"}
>>> d3={"Mango":12.34,"Apple":4.5,"Kiwi":20.00}
>>> d1.update(d2,d3)----------------TypeError: update expected at most 1 argument, got 2
>>> d1.update(d2).update(d3)---------AttributeError: 'NoneType' object has no attribute 'update'
			>>> #Solution for the above Problem
>>> d1.update(d2)
>>> d1.update(d3)
>>> print(d1,id(d1))-----{10: 1.2, 20: 2.3, 1: 'Python', 2: 'C', 'Mango': 12.34, 'Apple': 4.5, 'Kiwi': 20.0} 2980973329344
----------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={10:11.2,20:21.4}
>>> d3={"Mango":12.34,"Apple":4.5,"Kiwi":20.00}
>>> d1=d1+d2+d3---------------TypeError: unsupported operand type(s) for +: 'dict' and 'dict'
=============================================x=========================================================
Special Points : When we specify Only DictObject then PVM Takes Only Values of Key
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Examples
--------------------------------------------------------------------
>>> d3={"Mango":12.34,"Apple":4.5,"Kiwi":20.00}
>>> print(d3)----------------{'Mango': 12.34, 'Apple': 4.5, 'Kiwi': 20.0}
>>> for x in d3:  
...	 print(x)
...
		Mango
		Apple
		Kiwi
>>> for x in d3:
...		print(x,"--->",d3[x])
...
		Mango ---> 12.34
		Apple ---> 4.5
		Kiwi ---> 20.0
>>> for x in d3:
...		print(x,"--->",d3.get(x))
...
		Mango ---> 12.34
		Apple ---> 4.5
		Kiwi ---> 20.0
==========================================x=======================================================




















































