	============================================
		global  and local variables and globals()
	============================================
Local variable:
=============
    The variable use in inside function body is called Local variable use to store temporary data.
    
Global variable :
=================
=>When we come acrosss same global Variable names and Local Variable Names in same function definition then PVM gives preference for local variables but not for global variables.
=>In this context, to extract / retrieve the values of global variables names along with local variables, we must use globals() and it returns an object of <class,'dict'> and this dict object stores all global variable Names as Keys and global variable values as values of value.

=>Syntax:-
		var1=val1
		var2=val2
		--------------
		var-n=val-n  # var1, var2...var-n are called global Variables
		def    functionname():
		       ------------------------
		       var1=val11
		       var2=val22
		       -----------------
		       var-n=val-nn  #  var1, var2...var-n are called local Variables
		       # Extarct  the global variables values
		       dictobj=globals()
		       ------------------------
		       globalval1=dictobj['var1']  #  or  dictobj.get("var1") or globals()['var1'] or global().get('var1')
		       globalval2=dictobj['var2']  # or dictobj.get("var2") or globals()['var2']
		       -----------------------------------------------------
		       -----------------------------------------------------
==================================================================
Examples:
============
#globalsfunex3.py
a=10
b=20
c=30
d=40
def   operations():
	obj=globals()
	for gvn,gvv in obj.items():
		print("\t{}---->{}".format(gvn,gvv))
	print("="*50)
	print("\nProgrammer-defined Global Variables")
	print("="*50)
	print("Val of a=", obj['a'])
	print("Val of b=", obj['b'])
	print("Val of c=", obj['c'])
	print("Val of d=", obj['d'])
	print("="*50)
	print("\nProgrammer-defined Global Variables")
	print("="*50)
	print("Val of a=", obj.get('a'))
	print("Val of b=", obj.get('b'))
	print("Val of c=", obj.get('c'))
	print("Val of d=", obj.get('d'))
	print("="*50)
	print("\nProgrammer-defined Global Variables")
	print("="*50)
	print("Val of a=", globals().get('a'))
	print("Val of b=", globals().get('b'))
	print("Val of c=", globals().get('c'))
	print("Val of d=", globals().get('d'))
	print("="*50)
	print("\nProgrammer-defined Global Variables")
	print("="*50)
	print("Val of a=", globals()['a'])
	print("Val of b=", globals()['b'])
	print("Val of c=", globals()['c'])
	print("Val of d=", globals()['d'])
	print("="*50)
=================================================	
#main program
operations()
==================================================
Examples:
-----------------------
#Program for demonstrating globals()
#globalsfunex2.py
a=10
b=20
c=30
d=40  # Here  a,b,c,d are called Global Variables
def   operation():
	a=100
	b=200
	c=300
	d=400   # Here  a,b,c,d are called Local Variables
	res=a+b+c+d+globals()['a']+globals().get('b')+globals()['c']+globals()['d']
	print(res)

#main program
operation()

====================================X====================================