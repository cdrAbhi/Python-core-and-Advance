			=======================================================
					Pre-defined functions in set
			=======================================================
=>On the object of set, we can perform various Operations by using pre-defined fucntions present in set object. They are
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) clear()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj.clear()
=>This Function is used for Removing all Elements from set object
=>When we call this function on empty set object then we get None OR Space as Result.
--------------------------------
Examples
--------------------------------
>>> s1={10,20,30,"Python"}
>>> print(s1,type(s1),id(s1))---------------{10, 'Python', 20, 30} <class 'set'> 1934488682560
>>> len(s1)-------------------------------------4
>>> s1.clear()
>>> print(s1,type(s1),id(s1))--------------set() <class 'set'> 1934488682560
>>> len(s1)------------------------------------0
>>> print(s1.clear())-----------------------None
		OR
>>> s1.clear()-------------------------------Space
---------------------------
>>> print(set().clear())-------------------None
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) add()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj.add(Value)
=>This Function is used fior adding value to set object.
------------------------------
Examples
-----------------------------
>>> s1={10,"Suraj"}
>>> print(s1,type(s1),id(s1))----------------{10, 'Suraj'} <class 'set'> 1934488682784
>>> s1.add("Python")
>>> print(s1,type(s1),id(s1))----------------{10, 'Python', 'Suraj'} <class 'set'> 1934488682784
>>> s1.add(23.45)
>>> print(s1,type(s1),id(s1))----------------{10, 'Python', 23.45, 'Suraj'} <class 'set'> 1934488682784
>>> s1.add(1234)
>>> print(s1,type(s1),id(s1))----------------{'Python', 10, 1234, 23.45, 'Suraj'} <class 'set'> 1934488682784
------------------------------------------
>>> s1=set()
>>> print(s1,type(s1),id(s1))----------------set() <class 'set'> 1934489140608
>>> s1.add(100)
>>> s1.add("Python")
>>> s1.add("RS")
>>> print(s1,type(s1),id(s1))---------------{'RS', 'Python', 100} <class 'set'> 1934489140608
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) remove()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   setobj.remove(Value)
=>This Function is used for Removing the Specified Value from set object.
=>If the Specified Value does not exist in set object then we get KeyError.
-------------------------------
Examples
-------------------------------
>>> s1={10,20,30,40,10,55,65,75}
>>> print(s1,type(s1),id(s1))----------------------{65, 20, 55, 40, 10, 75, 30} <class 'set'> 1656018461952
>>> s1.remove(10)
>>> print(s1,type(s1),id(s1))----------------------{65, 20, 55, 40, 75, 30} <class 'set'> 1656018461952
>>> s1.remove(40)
>>> print(s1,type(s1),id(s1))----------------------{65, 20, 55, 75, 30} <class 'set'> 1656018461952
>>> s1.remove(65)
>>> print(s1,type(s1),id(s1))-----------------------{20, 55, 75, 30} <class 'set'> 1656018461952
>>> s1.remove(140)-----------------------------------KeyError: 140
--------------
>>> set().remove(100)-------------------------------KeyError: 100
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
4) discard()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:    setobj.discard(Value)
=>This Function is used for Removing the Specified Value from set object.
=>If the Specified Value does not exist in set object then we never get KeyError.
-------------------------------
Examples
-------------------------------
>>> s1={10,20,30,40,10,55,65,75}
>>> print(s1,type(s1),id(s1))--------------------------{65, 20, 55, 40, 10, 75, 30} <class 'set'> 1656018682144
>>> s1.discard(10)
>>> print(s1,type(s1),id(s1))---------{65, 20, 55, 40, 75, 30} <class 'set'> 1656018682144
>>> s1.discard(30)
>>> print(s1,type(s1),id(s1))------------{65, 20, 55, 40, 75} <class 'set'> 1656018682144
>>> s1.discard(55)
>>> print(s1,type(s1),id(s1))----------{65, 20, 40, 75} <class 'set'> 1656018682144
>>> s1.discard(130)  # No Output---OR None
>>> s1.remove(130)--------------------KeyError: 130
>>> print(set().discard(100))---------None
>>> print(set().remove(100))--------KeyError: 100
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) pop() 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:    steobj.pop()
=>This Function is used for Removing any Arbitary Element from set object in the case of Without Order of Elements.
=>This Function is used for Removing First  Element from set object in the case of  Order of Elements.
=>If we call this Function on empty set object  then we get KeyError
-----------------------------
Example1---Without Order of Display -----Removes Any Arbitrary Element
-----------------------------
>>> s1={10,"Srini",44.44,"Python",2+3j,True}
>>> s1.pop()---------------True
>>> s1.pop()---------------'Python'
>>> s1.pop()---------------10
>>> s1.pop()---------------(2+3j)
>>> s1.pop()---------------44.44
>>> s1.pop()---------------'Srini'
>>> s1.pop()---------------KeyError: 'pop from an empty set'
>>> set().pop()-------------KeyError: 'pop from an empty set'
-----------------------------
Example2----Given Order of Display --Removes First Element
-----------------------------
>>> s1={10,"Srini",44.44,"Python",2+3j,True}
>>> print(s1,type(s1),id(s1))------------{True, 'Python', 10, (2+3j), 44.44, 'Srini'} <class 'set'> 1656018682144
>>> s1.pop()--------------------True
>>> s1.pop()--------------------'Python'
>>> s1.pop()--------------------10
>>> s1.pop()--------------------(2+3j)
>>> s1.pop()--------------------44.44
>>> s1.pop()--------------------'Srini'
--------------------------------------------------
Example1:  Without Order of Display -----Removes Any Arbitrary Element
-------------------------------------------------
>>> s1={10,20,30,40,50,60,70,70,80,90,100}
>>> s1.pop()
100
>>> s1.pop()
70
>>> s1.pop()
40
>>> s1.pop()
10
>>> s1.pop()
80
>>> s1.pop()
50
>>> s1.pop()
20
--------------------------------------------------
Example2:-Given Order of Display --Removes First Element
-------------------------------------------------
>>> s1={100,200,300,400,500,600}
>>> print(s1,type(s1),id(s1))
{400, 100, 500, 200, 600, 300} <class 'set'> 1656018461952
>>> s1.pop()
400
>>> s1.pop()
100
>>> s1.pop()
500
>>> s1.pop()
200
>>> s1.pop()
600
>>> s1.pop()
300
>>> s1.pop()-------------KeyError: 'pop from an empty set'
>>> set({10,20,30,40,50,60,70}).pop()---------50

-------------------------------------------------------------------------------------------------------------------------------------------------------------------



6) copy()----Implementation Shallow Copy
------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:     setobj2=setobj1.copy()
=>This Function is used for Copying the content of one set object to another set object.
------------------------------------------
Examples
------------------------------------------
>>> s1={10,20,30,40}
>>> print(s1,type(s1),id(s1))------------{40, 10, 20, 30} <class 'set'> 1656018681920
>>> s2=s1.copy() # Shallow Copy
>>> print(s2,type(s2),id(s2))------------{40, 10, 20, 30} <class 'set'> 1656018461952
>>> s1.add(100)
>>> s2.add(400)
>>> print(s1,type(s1),id(s1))-----------{100, 40, 10, 20, 30} <class 'set'> 1656018681920
>>> print(s2,type(s2),id(s2))-----------{40, 10, 400, 20, 30} <class 'set'> 1656018461952
------------------------------------------------------------------------------------------------------------------------------------------------------------------
7) isdisjoint()
------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj1.isdisjoint(setobj2)
=>This Function returns True provided there is no common element in both setobj1 and setobj2.
=>This Function returns False provided there is a common element in both setobj1 and setobj2.
--------------------------------
Examples
--------------------------------
>>> s1={10,20,30}
>>> s2={15,25,35}
>>> s3={15,45,55}
>>> s1.isdisjoint(s2)---------True
>>> s1.isdisjoint(s3)---------True
>>> s2.isdisjoint(s3)---------False
--------------------------------Most Imp------------
>>> set().isdisjoint(s1)-------True
>>> set().isdisjoint(set())-----True
------------------------------------------------------------------------------------------------------------------------------------------------------------------
8) issuperset()
------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax: setobj1.issuperset(setobj2)
=>This function returns True Provided setobj1 contains all the elements of setobj2 OR all the elements of setobj2 are 
    present in setobj1.
------------------------------------
Examples
------------------------------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> s3={10,20,40,50}
>>> s1.issuperset(s2)-----------True
>>> s2.issuperset(s1)-----------False
>>> s1.issuperset(s3)----------False
>>> s3.issuperset(s1)---------False
-------------------------
>>> s1.issuperset(set())----------True
>>> s1.issuperset(s1)-------------True
>>> set().issuperset(set())-------True
------------------------------------------------------------------------------------------------------------------------------------------------------------------
9) issubset()
------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj1.issubset(setobj2)
=>This Function returns True Provided all the Elements of setobj1 present in setobj2  OR setobj2 contains all the 
    Elements of setobj1
=>This Function returns False Provided Atleast one Element of setobj1 not present in setobj2.
------------------------
Examples
-----------------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> s3={10,20,40,50}
>>> s2.issubset(s1)------------True
>>> s2.issubset(s3)------------True
>>> s1.issubset(s2)------------False
>>> s3.issubset(s1)------------False
------------------------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> set().issubset(s1)----------------True
>>> s1.issubset(set())---------------False
>>>
>>> s1.issubset(s1)-----------------True
>>> set().issubset(set())-----------True
>>> set({10,20,30}).issubset(set({10,20,30}))-------True
>>> set("PYTHON").issubset(set("python"))-------False
>>> set("PYTHON").issubset(set("PYTHON"))-----True
------------------------------------------------------------------------------------------------------------------------------------------------------------------
10) union()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj3=setobj1.union(setobj2)
=>This Function is used obtaining all the Qnique Elements of setobj1 and setobj2 and resultant Elements Placed in setobj3.
-----------------------
Examples:
------------------------
>>> s1={10,20,30}
>>> s2={20,40,50}
>>> s3=s1.union(s2)
>>> print(s3,type(s3))------------{50, 20, 40, 10, 30} <class 'set'>
>>> s4=s2.union(s1)
>>> print(s4,type(s4))------------{50, 20, 40, 10, 30} <class 'set'>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
11) intersection()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj3=setobj1.intersection(setobj2)
=>This Function is used obtaining all Common Elements of setobj1 and setobj2 and resultant Common Elements 
   Placed in setobj3.
------------------------
Examples
-----------------------
>>> s1={10,20,30}
>>> s2={20,40,50}
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))---------{20} <class 'set'>
>>> s4=s2.intersection(s1)
>>> print(s4,type(s4))-------------{20} <class 'set'>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
12) difference()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  setobj3=setobj1.difference(setobj2)
=>This Function is used removing the common Elements  from Both setobj1 and setobj2 and Takes remaining Elements setoibj1 and Placed in setobj3.
--------------------------------
Examples
------------------------------
>>> s1={10,20,30}
>>> s2={20,40,50}
>>> s3=s1.difference(s2)
>>> print(s3,type(s3))----------{10, 30} <class 'set'>
>>> s3=s2.difference(s1)
>>> print(s3,type(s3))---------{40, 50} <class 'set'>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
13) symmetric_difference()  (In Maths This Function is called DELTA Operator )
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj3=setobj1.symmetric_difference(setobj2)
				(OR)
=>Syntax:   setobj3=setobj1.union(setobj2).difference(setobj1.intersection(setobj2))
------------------
Examples
-----------------
>>> s1={10,20,30}
>>> s2={20,40,50}
>>> s1={10,20,30}
>>> s2={20,40,50}
>>> s3=s1.symmetric_difference(s2)
>>> print(s3,type(s3))--------------{40, 10, 50, 30} <class 'set'>
>>> s3=s2.symmetric_difference(s1)
>>> print(s3,type(s3))---------------{40, 10, 50, 30} <class 'set'>
===============By Formula=====================
>>> s1={10,20,30}
>>> s2={20,40,50}
>>> s3=s1.union(s2).difference(s1.intersection(s2))
>>> print(s3,type(s3))--------{40, 50, 10, 30} <class 'set'>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
14) symmetric_difference_update()--Tomorrow Class sharp 9:10AM
-------------------------------------------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------------------------------------------
15) update()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------






=====================================================================
Problem Statement
=====================================================================




=====================================================================
Special Points
=====================================================================




=====================================================================