		=============================================
			Data Encapsulation and Data Abstraction
		=============================================
Data Encapsulation:
--------------------------------
=>The Process of Hiding the confidential Information / Data / Methods from external Programmers / end users is called Data Encapsulation.
=>The Purpose of Encapsulation concept is that "To Hide Confidental Information / Features of Class (Data Members and Methods  ) ".
=>Data Encapsulation can be applied in two levels. They are
		a) At Data Members Level
		b) At Methods Level
=>To implement Data Encapsulation in python programming, The Data Members , Methods   must be preceded with double under score ( _ _ ).

Syntax1:-         (Data member Lavel  through method )    
---------------
			 class <ClassName>:
					def   methodname(self):
						self.__Data MemberName1=Value1
						self.__Data MemberName2=Value2
						--------------------------------------------------
						self.__Data MemberName-n=Value-n

						(OR)

Syntax1:-		(  Data member Lavel  through Constructor )

				class <ClassName>:
					def   __init__(self):
						self.__Data MemberName1=Value1
						self.__Data MemberName2=Value2
						--------------------------------------------------
						self.__Data MemberName-n=Value-n


Syntax2:-			(Method Level)

				class <ClassName>:
					def   __methodname(self):
						self.Data MemberName1=Value1
						self.Data MemberName2=Value2
						--------------------------------------------------
						self.Data MemberName-n=Value-n

==============================================================
Data Abstraction:
-------------------------------
=>The Process of retrieving / extracting Essential Details without considering Hidden Details is called Data Abstraction.
----------------------------------------------------------------------------------------------------------------------------------
Note:- We can't apply Data Encapsulation on Constructors in Python but whose Initlized Data Memebrs 
           can be encapsulated.
Note: We can also Encapsulate Class Name But In real Time Hiding the class name is of no use.

		class  __<clsname>:
		      ---------------------------------
		      ---------------------------------
		      ---------------------------------
Note: incapsulate data member or methods are available only inside same class defnition.
          
	1)data membe:  we are unable to access data member outside of class defnition or another file.py using import(module concept) but we can use it inside class                         ------------------      defnition like below.
    
                self._datamembername

              2) method: we are unable to call method outside of class defnition or another file.py using import(module concept) but we can use it inside class defnition.
              --------
                    self.__method_name()
                 
      
====================================================================================

a=12
print(type(a)) ----------- <class,int>
print(type(int))  ------- <class,type>
print(type(type))--------<class,type>	
================================
Metaclass for Classes: The type class is the metaclass for all classes in Python. This means that when you create a new class, Python uses type to construct it. Essentially, type is responsible for defining what classes are and how they behave.
====================	        