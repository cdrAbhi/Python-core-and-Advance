                 Synchronization in Multi Threading
                 ==================================
=> When multiple threads are operating / working on the same resource(function / method) then by
default we get dead lock result I race condition I wrong result.
overcome this dead lock problems, we must apply the concept Synchronization conncept.
=> The advantage of synchronization concept is that to avoid dead lock result and provides Thread
Safety Result.
=> In Python Programming, we can obtain synchronization concept by using locking and un-locking
concept.
=> Steps for implementing Synchronization Concept:
1) obtain I create an object of Lock class, which is present in threading module.
    Syntax:-
          lockobj=threading.Lock()
2) To obtain the lock on the sharable resource, we must use acquire()
    Syntax:-
           lockobj.acquire()
    Once current object acquire the lock, other objects are made wait until curent object releases the
    lock.
3) To un-lock the sharable resource/current object, we must use release()
    Syntax:-
        lockobj.release()
    Once current object releases the lock, other objects are permitted into shrable resource. This
    process of aquiring the releasing the lock will be continued until all the objects completed their
    execution.   
    
    
example:
=========    
 # nonlockinge.py
import threading , time
k=threading.Lock()
def multable(n):
    print("Child Thread Name=",threading.current_thread().name)
    print("Mul Table for O ".format(n))
    for i in range(1,11):
        print(f"{n}x{i}={n*i}") 
        # time.sleep(1)
#main program
t1=threading.Thread(target=multable,args=(2,))
t2=threading.Thread(target=multable,args=(3,))
t3=threading.Thread(target=multable,args=(4,))
t1.start()
t2.start()
t3.start()


'''
output
=====================
Child Thread Name= Thread-1
Mul Table for O 
2x1=2
2x2=4
2x3=6
2x4=8
2x5=10
2x6=12
2x7=14
2x8=16
2x9=18
2x10=20
Child Thread Name= Thread-2
Mul Table for O 
3x1=3
3x2=6
3x3=9
3x4=12
3x5=15
3x6=18
3x7=21
3x8=24
3x9=27
3x10=30
Child Thread Name= Thread-3
Mul Table for O 
4x1=4
4x2=8
4x3=12
4x4=16
4x5=20
4x6=24
4x7=28
4x8=32
4x9=36
4x10=40
'''


#lockingexl .py
====================
import threading , time
k=threading.Lock() # Step-I
def multable(n):
    k.acquire() # step-2
    print("Child Thread Name=",threading.current_thread().name)
    print("MulTable for {}".format(n))
    for i in range(1,11):
        print(f"{n}x{i}={n*i}") 
        time.sleep(1)
    k.release() # Step-3
#main program
t1=threading.Thread(target=multable,args=(5,))
t2=threading.Thread(target=multable,args=(13,))
t3=threading.Thread(target=multable,args=(27,))
t1.start()
t2.start()
t3.start()

'''
output
=====================
Child Thread Name= Thread-1
Mul Table for O 
2x1=2
2x2=4
2x3=6
2x4=8
2x5=10
2x6=12
2x7=14
2x8=16
2x9=18
2x10=20
Child Thread Name= Thread-2
Mul Table for O 
3x1=3
3x2=6
3x3=9
3x4=12
3x5=15
3x6=18
3x7=21
3x8=24
3x9=27
3x10=30
Child Thread Name= Thread-3
Mul Table for O 
4x1=4
4x2=8
4x3=12
4x4=16
4x5=20
4x6=24
4x7=28
4x8=32
4x9=36
4x10=40


** Process exited - Return Code: 0 **
Press Enter to exit terminal
'''

#lockingexExm-2.py
====================
import threading,time 

class mulTable(threading.Thread):
    k=threading.Lock()
    def setval(self,n):
        self.n=n 
        self.getMul()
    def getMul(self):
        self.k.acquire() # step-2
        print("Child Thread Name=",threading.current_thread().name)
        print("MulTable for {}".format(self.n))
        for i in range(1,11):
            print(f"{self.n}x{i}={self.n*i}") 
            time.sleep(1)
        self.k.release() # Step-3
        
        
#main program
t1=mulTable()
t2=mulTable()
t3=mulTable()
t1.setval(5)
t2.setval(4)
t3.setval(3)
t1.start()
t2.start()  
t3.start()
        
'''
Output
=======
Child Thread Name= MainThread
MulTable for 5
5x1=5
5x2=10
5x3=15
5x4=20
5x5=25
5x6=30
5x7=35
5x8=40
5x9=45
5x10=50
Child Thread Name= MainThread
MulTable for 4
4x1=4
4x2=8
4x3=12
4x4=16
4x5=20
4x6=24
4x7=28
4x8=32
4x9=36
4x10=40
Child Thread Name= MainThread
MulTable for 3
3x1=3
3x2=6
3x3=9
3x4=12
3x5=15
3x6=18
3x7=21
3x8=24
3x9=27
3x10=30


'''




#lockingex3.py
====================

import threading,time 

class MulTab:
    @classmethod
    def getlockobj(cls):
        cls.L=threading.Lock()
    
    def __init__(self,n):
        self.n=n
        
    def getMul(self):
        self.L.acquire() # step-2
        print("Child Thread Name=",threading.current_thread().name)
        print("MulTable for {}".format(self.n))
        for i in range(1,11):
            print(f"{self.n}x{i}={self.n*i}") 
            time.sleep(1)
        self.L.release() # Step-3
        
#main program
MulTab.getlockobj()
m1=MulTab(2)
m2=MulTab(3)
m3=MulTab(4)
#create multiple child threads
t1=threading.Thread(target=m1.getMul)
t2=threading.Thread(target=m2.getMul)
t3=threading.Thread(target=m3.getMul)
#dispatch the therads
t1.start()
t2.start()
t3.start()

'''
output
=======
Child Thread Name= Thread-1
MulTable for 2
2x1=2
2x2=4
2x3=6
2x4=8
2x5=10
2x6=12
2x7=14
2x8=16
2x9=18
2x10=20
Child Thread Name= Thread-2
MulTable for 3
3x1=3
3x2=6
3x3=9
3x4=12
3x5=15
3x6=18
3x7=21
3x8=24
3x9=27
3x10=30
Child Thread Name= Thread-3
MulTable for 4
4x1=4
4x2=8
4x3=12
4x4=16
4x5=20
4x6=24
4x7=28
4x8=32
4x9=36
4x10=40


** Process exited - Return Code: 0 **
Press Enter to exit terminal
'''