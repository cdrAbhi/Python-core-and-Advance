			==================================================
						3. bytearray
			==================================================
=>'bytearray' is one of the pre-defined class and treated as Sequence Data Type.
=>The Purpose of bytearray data type is that "To Implement End-to-End Encryption / Cipher 
    Text(HumanUn-Readable) Format".
=>To Implement End-to-End Encryption format, bytearray data type stores the data in the range of 
    (0,256)(It stortes 0 to 255 only)
=>To Represent the data  OR To Store the data in the obejct of bytearray, we don't have any symbolic 
    notation. But we can convert Other Type of Values into bytearray type by using bytearray().
=>Syntax:   varname=bytearray(object)	
=>An object of bytearray data type maintains Insertion Order ( Nothing but, whichever order we 
    organize the data, in the same order Data will be displayed)
=>On the object of bytearray, we can perform  Both Indexing and Slicing Operation.
=>An object of bytearray belongs to MUTABLE bcoz bytearray' object  supports item assignment and 
   Updations / Modifications.
-------------------------------------------------------------------------------------------------------------------------------------------------
Note: The Functionality of bytearray data type is exactly similar to bytes data type	But an object of 
          bytearray belongs to MUTABLE where bytes object belongs to IMMUTABLE.
-------------------------------------------------------------------------------------------------------------------------------------------------
Examples
-------------------------------------------------------------------------------------------------------------------------------------------------
>>> lst=[10,123,45,0,56,256]
>>> print(lst,type(lst))--------------[10, 123, 45, 0, 56, 256] <class 'list'>
>>> ba=bytearray(lst)--------------ValueError: byte must be in range(0, 256)
>>> lst=[-10,123,45,0,56,255]
>>> print(lst,type(lst))--------------[-10, 123, 45, 0, 56, 255] <class 'list'>
>>> ba=bytearray(lst)---------------ValueError: byte must be in range(0, 256)
>>> lst=[10,123,45,0,56,255]
>>> print(lst,type(lst))--------------[10, 123, 45, 0, 56, 255] <class 'list'>
>>> ba=bytearray(lst)
>>> print(ba,type(ba))--------------bytearray(b'\n{-\x008\xff') <class 'bytearray'>
--------------------------------------
>>> lst=[10,123,45,0,56,255]
>>> print(lst,type(lst))-----------[10, 123, 45, 0, 56, 255] <class 'list'>
>>> ba=bytearray(lst)
>>> print(ba,type(ba))-----------bytearray(b'\n{-\x008\xff') <class 'bytearray'>
>>> for val in ba:
...		print(val)
...
					10
					123
					45
					0
					56
					255
-------------------------------------
>>> lst=[10,123,45,0,56,255]
>>> print(lst,type(lst))-----------------[10, 123, 45, 0, 56, 255] <class 'list'>
>>> ba=bytearray(lst)
>>> print(ba,type(ba),id(ba))--------bytearray(b'\n{-\x008\xff') <class 'bytearray'> 2376621698672
>>> ba[0]---------------------------10
>>> ba[-1]--------------------------255
>>> for val in ba:
...		print(val)
...
			10
			123
			45
			0
			56
			255
>>> ba[0]=100 # Item Assigment --Updations
>>> print(ba,type(ba),id(ba))-----------bytearray(b'd{-\x008\xff') <class 'bytearray'> 2376621698672
>>> for val in ba:
...		print(val)
...
			100
			123
			45
			0
			56
			255
>>> for val in ba[::-1]:
...		print(val)
...
			255
			56
			0
			45
			123
			100
>>> ba[0:5]----------------------bytearray(b'd{-\x008')
>>> for val in ba[0:5]:
...		print(val)
...
			100
			123
			45
			0
			56
====================================================================================