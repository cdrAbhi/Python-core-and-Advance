		========================================================
				Operations on str data
		========================================================
=>On str data, we can perform Two Types of Operations. They are
			
			1. Indexing Operation
			2. Slicing Operation
--------------------------------------------------------------------------------------------------------------------------------------------	
1. Indexing Operation
--------------------------------------------------------------------------------------------------------------------------------------------	
=>The Process of Obtaining One Value / Char at a time from StrObject by passing Valid Index is called 
    Indexing.
=>Syntax:    StrObj[Index]
=>Here This Syntax give One Value from StrObj which is Present at Specified Index.
=>Here Index can be Either +Ve or  -Ve
=>When we Enter Invalid Index then we get IndexError.
-----------------------------------------------------------------------------------------------------------------
Examples
-----------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))--------------------PYTHON <class 'str'>
>>> print(s[0])---------------------------P
>>> print(s[2])---------------------------T
>>> print(s[4])---------------------------O
>>> print(s[5])---------------------------N
----------------------------
>>> s="PYTHON"
>>> print(s,type(s))-----------------PYTHON <class 'str'>
>>> s[-1]--------------------------------'N'
>>> s[-3]--------------------------------'H'
>>> s[-6]--------------------------------'P'
>>> s[-4]---------------------------------'T'
>>> s[-5]---------------------------------'Y'
>>> s[-2]---------------------------------'O'
------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))----------------PYTHON <class 'str'>
>>> s[10]------------------------------IndexError: string index out of range
>>> s[-7]-------------------------------IndexError: string index out of range
----------------------------------------------
MOST IMP
-----------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))----------------------PYTHON <class 'str'>
>>> s[len(s)]-------------------------------IndexError: string index out of range
>>> s[len(s)-1]----------------------------'N'
>>> s[-len(s)-1]----------------------------IndexError: string index out of range
>>> s[-len(s)]-------------------------------'P'
>>> s[len(s)-len(s)]----------------------'P'
==============================================================================
2. Slicing Operation
==============================================================================
=>The Process of Obtaining Range of Values OR Sub String from Main StrObj is called Slicing Operation.
=>We can use Slicing Operation with 5 Syntaxes. They are
-----------------------------------------------------------------------------------------------------------------------------------------
Syntax-1:   StrObj[BEGIN:END]
-----------------------------------------------------------------------------------------------------------------------------------------
=>This Syntax Generates OR Obtains Range of Values OR Sub String from BEGIN to END-1 Provided BEGIN < END otherwise we get ' ' (Space) as Result.
-----------------------------------
Examples
----------------------------------
>>>s="PYTHON"
>>> print(s,type(s))----------------------PYTHON <class 'str'>
>>> s[0:3]-----------------------------------'PYT'
>>> s[0:5]-----------------------------------'PYTHO'
>>> s[2:5]-----------------------------------'THO'
>>> s[4:5]------------------------------------'O'
>>> s[4:6]------------------------------------'ON'
>>> s[0:6]------------------------------------'PYTHON'
>>> s[6:3]-------------------------------------' '
>>> s[3:1]-------------------------------------' '
------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))---------------------------PYTHON <class 'str'>
>>> s[-6:-2]--------------------------------------'PYTH'
>>> s[-5:-1]--------------------------------------'YTHO'
>>> s[-6:-3]--------------------------------------'PYT'
>>> s[-3:-1]---------------------------------------'HO'
>>> s[-5:-2]---------------------------------------'YTH'
>>> s[-2:-6]---------------------------------------' '
>>> s[-1:-5]---------------------------------------' ' 
----------------------------------------
MOST IMP
---------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))------------------PYTHON <class 'str'>
>>> s[2:122]----------------------------'THON'
>>> s[0:355]----------------------------'PYTHON'
>>> s[355:0]----------------------------' '
---------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))-------------------PYTHON <class 'str'>
>>> s[2:122]----------------------------'THON'
>>> s[0:355]----------------------------'PYTHON'
>>> s[355:0]-----------------------------' '
>>> s[-125:-2]---------------------------'PYTH'
>>> s[-1000:-5]--------------------------'P'
>>> s[-50:-3]------------------------------'PYT'
>>> s[-2000:-4]---------------------------'PY'
>>> s[-4:-123]----------------------------'  '
>>> s[-6:-45]------------------------------' '
--------------------------------------------------------------
MOST MOST IMP POINTS
--------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))-----------------PYTHON <class 'str'>
>>> s[1:-2]-----------------------------'YTH'
>>> s[2:-1]-----------------------------'THO'
>>> s[0:-1]-----------------------------'PYTHO'
>>> s[3:-1]-----------------------------'HO'
>>> s[-5:4]-----------------------------'YTH'
>>> s[-6:6]-----------------------------'PYTHON'
>>> s[-6:123]--------------------------'PYTHON'
>>> s[-123:234]-----------------------'PYTHON'
>>> s[-1000:2000]--------------------'PYTHON'
>>> s[4:-5]-------------------------------' '
>>> s[2:-5]-------------------------------' '
>>> s[0:-6]-------------------------------' '
>>> s[0:-5]--------------------------------'P'
-------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))----------------PYTHON <class 'str'>
>>> s[-6:len(s)]---------------------'PYTHON'
>>> s[-len(s):6]---------------------'PYTHON'
>>> s[-len(s):66666]--------------'PYTHON'
>>> s[-6666:len(s)]---------------'PYTHON'
>>> s[6666:len(s)]----------------' '
----------------------------------------------------------------------------------------------------------------------------------
Syntax-2: strobj[BEGIN:]
----------------------------------------------------------------------------------------------------------------------------------
=>In this Syntax, We are Specifying BEGIN Index and Not Specifying END Index.
=>If we Don't  Specify END Index then PVM Takes Upto Last Character
			(OR)
=>If we Don't Specify END Index then PVM Takes End Index as len(strobj) when +VE Begin Index
=>If we Don't Specify END Index then PVM Takes End Index as upto -1 (Upto Last Character) when we 
    use  -VE Begin Index
---------------------------------------------------------------------------------------------------------------------------------
Examples
---------------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))-----------------PYTHON <class 'str'>
>>> s[2:]--------------------------------'THON'
>>> s[3:]--------------------------------'HON'
>>> s[1:]---------------------------------'YTHON'
>>> s[4:]---------------------------------'ON'
>>> s[5:]---------------------------------'N'
>>> s[55:]-------------------------------' '
>>> s[155:]-----------------------------' '
------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))--------------------------PYTHON <class 'str'>
>>> s[-6:]----------------------------------------'PYTHON'
>>> s[-3:]----------------------------------------'HON'
>>> s[-2:]----------------------------------------'ON'
>>> s[-5:]----------------------------------------'YTHON'
>>> s[-1:]----------------------------------------'N'
>>> s[-123:]-------------------------------------'PYTHON'
>>> s[-1123:]-----------------------------------'PYTHON'
>>> s[-1123:-1123]---------------------------' '
-----------------------------------------------------------------------------------------------------------------------------
Syntax-3: strobj[  :END]
----------------------------------------------------------------------------------------------------------------------------------
=>In this Syntax , we are specifying END Index.
=>In this Syntax , we are not specifying BEGIN Index.
=>If we Don't Specify BEGIN Index then PVM Takes from First Character to END-1  Index
-----------------------
Examples
-----------------------
>>> s="PYTHON"
>>> print(s,type(s))---------------PYTHON <class 'str'>
>>> s[:4]------------------------------'PYTH'
>>> s[:3]------------------------------'PYT'
>>> s[:5]------------------------------'PYTHO'
>>> s[:6]-------------------------------'PYTHON'
>>> s[:1]-------------------------------'P'
------------------------------
>>> s="PYTHON"
>>> print(s,type(s))---------------PYTHON <class 'str'>
>>> s[:-5]-----------------------------'P'
>>> s[:-1]-----------------------------'PYTHO'
>>> s[:-2]-----------------------------'PYTH'
>>> s[:-3]------------------------------'PYT'
>>> s[:-4]------------------------------'PY'
>>> s[:-1444]-------------------------' '
>>> s[:0]-------------------------------' '
>>> s[:456]---------------------------'PYTHON'
>>> s[:-456]--------------------------' '
----------------------------------------------------------------------------------------------------------------------------------
Syntax-4: strobj[ : ]
----------------------------------------------------------------------------------------------------------------------------------
=>In this Syntax , we are not specifying Both BEGIN and END Index.
=>If we don't specify Both BEGIN and END Index then PVM Takes First Chraceter to Last Character.
				(OR)
=>In Otherwords, In With +ve Indexing, PVM Takes BEGIN Index as 0 and END Index as len(strobj)-1
=>With -VE Indexing, PVM Takes BEGIN Index as -len(strobj) and  END Index as -1
----------------------------------------------------------------------------------------------------------------------------------
Examples
----------------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))----------------PYTHON <class 'str'>
>>> s[:]--------------------------------'PYTHON'
>>> s="Java Programming"
>>> s[:]-------------------------------'Java Programming'
>>> s----------------------------------'Java Programming'
>>> s="LIRIL"
>>> s[:]------------------------------'LIRIL'
>>> s="RACECAR"
>>> s[:]-------------------------------'RACECAR'
>>> s="WOW"
>>> s---------------------------------'WOW'
>>> s[:]------------------------------'WOW'
>>> s[:123]------------------------'WOW'
>>> s[-123:]-----------------------'WOW'
NOTE: By using all the Above 4 Syntaxes, we are obtaining Range of Chars In FORWARD Direction 
            with Default Step as +1
------------------------------------------------------------------------------------------------------------------------------------------------
Syntax-5:    StrObj[BEGIN:END:STEP]----Most IMP 
------------------------------------------------------------------------------------------------------------------------------------------------
RULE-1:   Here BEGIN , END and STEP can be either +VE and -VE 
--------------

RULE-2: If the value of STEP is +VE then PVM Takes of Range of Chars from BEGIN Index to END-1 
 ------------ Index in FORWARD Direction Provided  BEGIN < END otherwise we get  space ( ' ' ) as result.

-------------
RULE-3 :  If the value of STEP is -VE then PVM Takes of Range of Chars from  BEGIN to END+1 in -------------  BACKWARD Direction  Provided  BEGIN > END otherwise we get  space ( ' ' ) as result.
--------------
RULE-4:   In FORWARD DIRECTION, If we specify 0 as END INDEX then we get  space ( ' ' ) as result.
--------------

----------------
RULE-5 :  InBACKWARD DIRECTION, If we specify -1 as END INDEX then we get  space ( ' ' ) as result.
----------------
------------------------------------------------------------------------------------------------------------------------------------------------
RULE-2--Examples
-----------------------------------
>>> s="PYTHON"
>>> print(s)-------------------------PYTHON
>>> s[0:6:1]-------------------------'PYTHON'
>>> s[0:6:2]-------------------------'PTO'
>>> s[0:6:3]-------------------------'PH'
>>> s[2:6:2]-------------------------'TO'
>>> s[3:100:2]----------------------'HN'
>>> s[::1]-----------------------------'PYTHON'
>>> s[::2]-----------------------------'PTO'
>>> s[1::]-----------------------------'YTHON'
>>> s[1::]-----------------------------'YTHON'
>>> s[3::2]---------------------------'HN'
>>> s[:200:]--------------------------'PYTHON'
>>> s[:200:4]-------------------------'PO'
>>> s[:200:5]-------------------------'PN'
>>> s[:200:15]-----------------------'P'
>>> s[4:300:]------------------------'ON'
--------------
>>> s="PYTHON"
>>> print(s)-----------------------PYTHON
>>> s[5:3:1]-----------------------' '
>>> s[3:2:2]-----------------------' '
>>> s[4:1:2]----------------------' '
--------------------------------------------------------------------------------------------------
RULE-3---examples
--------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[::-1]
'NOHTYP'
>>> s[::1]
'PYTHON'
>>> s[0:6:-1]
''
>>> s[5:1:-1]
'NOHT'
>>> s[5:2:-2]
'NH'
>>> s[::-2]
'NHY'
>>> s[::-3]
'NT'
>>> s[5::-2]
'NHY'
>>> s[4::-2]
'OTP'
>>> s[:5:2]
'PTO'
>>> s[:5:2][::-1]
'OTP'
>>>
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[-6:]
'PYTHON'
>>> s[-6::]
'PYTHON'
>>> s[-6::1]
'PYTHON'
>>> s[-6::-1]
'P'
>>> s[-1::]
'N'
>>> s[-1::-1]
'NOHTYP'
>>> s[-1::-2]
'NHY'
>>> s[-2:-5:-2]
'OT'
>>> s[-2:-6:-3]
'OY'
>>> s[122:-1000:-1]
'NOHTYP'
>>> s[0:100:-2]
''
>>> s[0:100:]
'PYTHON'
>>> s[100:-7:-1]
'NOHTYP'
---------------------------------------------------------------------------------------------------------------------------
RULE-4
---------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[::]
'PYTHON'
>>> s[:0]
''
>>> s[2:0]
''
>>> s[2:0:1]
''
---------------------------------------------------------------------------------------------------------------------------
RULE-5
---------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[:-1:-1]
''
>>> s[-6:-1:-1]
''
>>> s[-123:-1:-2]
''
--------------------------------
>>> s="LIRIL"
>>> s[::]
'LIRIL'
>>> s[::-1]
'LIRIL'
>>> s[::]==s[::-1]
True
>>> s="PYTHON"
>>> s[::]==s[::-1]
False
>>> s="MADAM"
>>> s[::]==s[::-1]
True
>>> s="MALAYALAM"
>>> s[::]==s[::-1]
True
>>> s="ABRAKADABRA"
>>> s[::]==s[::-1]
False
>>> s="RACEcar"
>>> s[::]==s[::-1]
False
>>> "WOW"=="WOW"[::-1]
True
>>>
======================================x=====================================
